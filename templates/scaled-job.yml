{{- $stateMountPath := ternary "/mnt/public/" .Values.stateMountPath (.Values.strictSecurityContext | default false) -}}

# a cron job that never runs.
# its job template is used to trigger jobs via k8s api
apiVersion: {{ if .Capabilities.APIVersions.Has "batch/v1/CronJob" }}batch/v1{{ else }}batch/v1beta1{{ end }}
kind: CronJob       # describes the [job template](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)
metadata:
  name: {{ .Values.agentKey }}.deployment
spec:
  suspend: true                 # ensures this cron job never runs
  schedule: 0 0 1 1 1           # but a valid cron exprssion is still required
  jobTemplate:
    # describes the [job template](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)
    spec:
      parallelism: 1 # [max number of desired pods](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#controlling-parallelism)
      completions: 1 # [desired number of successfully finished pods](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#controlling-parallelism)
      activeDeadlineSeconds: 36000 # 10hours - grace in case our step function failed to kill it # Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
      backoffLimit: 0 # Specifies the number of retries before marking this job failed.
      template:
        metadata:
          labels:
            env0: agent-deployment
            {{- if .Values.podAdditionalLabels }}
              {{- .Values.podAdditionalLabels | toYaml | nindent 12 -}}
            {{- end }}
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
            karpenter.sh/do-not-evict: "true"
            karpenter.sh/do-not-disrupt: "true"
            {{- if .Values.podAdditionalAnnotations }}
              {{- .Values.podAdditionalAnnotations | toYaml | nindent 12 -}}
            {{- end }}
        spec:
          volumes:
            {{- if (eq (include "env0-agent.shouldUsePVC" .) "true") }}
            - name: env0-state-volume
              persistentVolumeClaim:
                claimName: env0-state-volume-claim
            {{- end }}
            - name: tmp
              emptyDir: { }
            - name: home
              emptyDir: { }
            {{- include "env0-agent.customCertificatesVolumes" . | nindent 12 }}
            {{- range $index, $secret := .Values.customSecretMounts }}
            - name: {{ $secret.volumeName }}
              secret:
                secretName: {{ $secret.secretName }}
            {{- end }}
            {{- range $index, $mount := .Values.customVolumeMounts }}
            - name: {{ $mount.name }}
              emptyDir: {}
            {{- end }}
          {{ if hasKey .Values "agentImagePullSecret" }}
          imagePullSecrets:
            - name: env0-image-pull-secret-{{ .Values.agentKey }}
          {{ end }}
          {{ if .Values.deploymentJobServiceAccountName }}
          serviceAccountName: {{ .Values.deploymentJobServiceAccountName }}
          {{ end }}
          {{- if or (.Values.strictSecurityContext) (.Values.initContainer) }}
          initContainers:
            # when running with strict security context we mount emptyDir volume to /`home`
            # but we have some content in `/home` of the image.
            # so we use InitContainer to copy the content of `/home` to the volume
            # we mount it to `/home-mount` and copy the content of `/home` to `/home-mount`
            {{- if .Values.strictSecurityContext }}
            - name: init-container
  {{ include "env0-agent.strict-security-context" . | indent 14 }}
              image: {{ .Values.dockerImage }}
              command: [ "/bin/sh", "-c" ]
              args:
                - echo 'Copy home dir content to the mount';
                  cp -rvp /home/* /home-mount;
                  echo 'Done';
              volumeMounts:
                - name: home
                  mountPath: /home-mount
            {{- end }}
            {{- if .Values.initContainer }}
            {{ toYaml .Values.initContainer | nindent 12 }}
            {{- end }}
          {{- end }}
          containers:
            - name: deployment-container
              {{ include "env0-agent.strict-security-context" . | indent 14 }}
              image: {{ .Values.dockerImage }}
              imagePullPolicy: {{ default "Always" .Values.agentImagePullPolicy }}
              command: [ "/bin/sh", "-c" ]
              args:
                # update-ca-certificates must be called before node starts
                - update-ca-certificates;
                  node --enable-source-maps main.js;
              volumeMounts:
              {{- if (eq (include "env0-agent.shouldUsePVC" .) "true") }}
                - name: env0-state-volume
                  mountPath: {{ $stateMountPath }}
              {{- end }}
                {{- include "env0-agent.customCertificatesVolumesMounts" . | nindent 16 }}
              {{ if .Values.strictSecurityContext }}
                - name: tmp
                  mountPath: /tmp
                - name: home
                  mountPath: /home
              {{ end }}
              {{- range $index, $secretVolumeMount := .Values.customSecretMounts }}
                - name: {{ $secretVolumeMount.volumeName }}
                  mountPath: {{ $secretVolumeMount.mountPath }}
                  readOnly: true
              {{- end }}
              {{- if .Values.customVolumeMounts }}
                {{ toYaml .Values.customVolumeMounts | nindent 16 }}
              {{- end }}
              resources:
                limits:
                {{ if .Values.limits.cpu }}
                  cpu: "{{ .Values.limits.cpu }}"
                {{ end }}
                  memory: "{{ .Values.limits.memory }}"
                {{ if .Values.requests }}
                requests:
                  cpu: "{{ .Values.requests.cpu }}"
                  memory: "{{ .Values.requests.memory }}"
                {{ end }}
              envFrom:
                - secretRef:
                    name: env0-secrets-{{ .Values.agentKey }}
              {{- if .Values.env0ConfigSecretName }}
                - secretRef:
                    name: {{ .Values.env0ConfigSecretName }}
              {{- end }}
              env:
{{ include "env0-agent.http-proxy" . | indent 16 }}
                - name: AGENT_VERSION
                  value: {{ quote (regexReplaceAll ".*:" .Values.dockerImage "") }}
                - name: IS_K8S
                  value: "true"
                - name: STAGE
                  value: "{{ .Values.agentKey }}"
                - name: ENV0_STAGE
                  value: "{{ .Values.stage }}"
                - name: IS_SELF_HOSTED_K8S
                  value: "{{ .Values.isSelfHosted }}"
                - name: DEPLOYMENT_LOGS_LOG_LEVEL
                  value: "debug"
                - name: ENV0_SERVICE_NAME
                  value: "deployment-service-{{ .Values.stage }}-deployment-task" # used as caller id to authorize task to invoke other services
                - name: KMS_KEY_ARN
                  value: "{{ .Values.kmsKeyArn }}"
                - name: HEARTBEAT_INTERVAL
                  value: "10000"
                - name: SIGTERM_TIMEOUT
                  value: "60000"
                - name: OUTPUT_LOGS_LOG_GROUP_NAME
                  value: "{{ .Values.outputLogsLogGroupName }}"
                - name: DEPLOYMENT_ECS_TASK_RUNTIME_TIMEOUT_SECONDS
                  value: "18000" # used as duration for assume role
                - name: STATE_MOUNT_PATH
                  value: "{{ $stateMountPath }}/{{ .Values.agentKey }}"
                - name: AGENT_API_GATEWAY_URL
                  value: "{{ .Values.apiGatewayUrl }}"
                - name: AWS_SECRETS_REGION
                  value: "{{ .Values.awsSecretsRegion }}"
                - name: GITLAB_ENTERPRISE_BASE_URL_SUFFIX
                  value: {{ .Values.gitlabEnterpriseBaseUrlSuffix | default "" | quote  }}
                - name: GITHUB_ENTERPRISE_APP_ID
                  value: {{ .Values.githubEnterpriseAppId | default "" | quote }}
                - name: GITHUB_ENTERPRISE_APP_CLIENT_ID
                  value: {{ .Values.githubEnterpriseAppClientId | default "" | quote }}
                - name: GITHUB_ENTERPRISE_APP_INSTALLATION_ID
                  value: {{ .Values.githubEnterpriseAppInstallationId | default "" | quote }}
                - name: ALLOWED_VCS_URL_REGEX
                  value: {{ empty .Values.allowedVcsUrlRegex | ternary .Values.allowedVcsUrlRegex (quote .Values.allowedVcsUrlRegex) }}
                ### K8S Metadata
                - name: K8S_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: DEPLOYMENT_JOB_SERVICE_ACCOUNT_NAME
                  value: {{ .Values.deploymentJobServiceAccountName | default "" }}
                {{ if .Values.providerInstallation }}
                - name: PROVIDER_INSTALLATION
                  value: {{ .Values.providerInstallation | toJson | quote }}
                {{ end }}
                {{ if .Values.gitSslNoVerify }}
                # even if this env var is empty it's consider 'true', so it's wrapped in an 'if'
                - name: GIT_SSL_NO_VERIFY
                  value: {{ .Values.gitSslNoVerify | quote }}
                {{ end }}
                {{- if .Values.strictSecurityContext }}
                - name: STRICT_SECURITY_CONTEXT
                  value: {{ .Values.strictSecurityContext | quote }}
                {{ if .Values.runAsUser }}
                - name: USER_UID
                  value: {{ .Values.runAsUser | int | quote }}
                {{- end }}
                {{- if .Values.runAsGroup }}
                - name: USER_GID
                  value: {{ .Values.runAsGroup | int | quote }}
                {{- end }}
                {{- end }}
                {{- include "env0-agent.customCertificatesNodeOptions" . | nindent 16 }}
                {{ if .Values.logger }}
                - name: CONSOLE_LOGS_FORMAT
                  value: {{ .Values.logger.format }}
                - name: CONSOLE_LOGS_LEVEL
                  value: {{ .Values.logger.level }}
                {{ end }}
                {{- include "env0-agent.additional-env-vars-and-custom-secrets" . | nindent 16}}
                {{ if .Values.vault }}
                - name: CUSTOMER_VAULT_ROLE_NAME
                  value: {{ .Values.vault.role | default "" | quote }}
                - name: CUSTOMER_VAULT_ADDRESS
                  value: {{ .Values.vault.address | quote }}
                - name: CUSTOMER_VAULT_USERNAME
                  value: {{ .Values.vault.username | default "" | quote }}
                - name: CUSTOMER_VAULT_LOGIN_PATH
                  value: {{ .Values.vault.loginPath | default "" | quote }}
                {{ end }}
          terminationGracePeriodSeconds: 18000
          restartPolicy: Never
          {{- include "env0-agent.tolerations" .Values.tolerations | nindent 10 -}}
          {{- include "env0-agent.affinity" (ternary .Values.affinity .Values.deploymentAffinity (empty .Values.deploymentAffinity)) | nindent 10 -}}
