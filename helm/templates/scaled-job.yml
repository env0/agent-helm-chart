{{- $stateMountPath := ternary "/mnt/public/" .Values.stateMountPath (.Values.strictSecurityContext | default false) -}}

# a cron job that never runs.
# its job template is used to trigger jobs via k8s api
apiVersion: {{ if .Capabilities.APIVersions.Has "batch/v1/CronJob" }}batch/v1{{ else }}batch/v1beta1{{ end }}
kind: CronJob       # describes the [job template](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)
metadata:
  name: {{ .Values.agentKey }}.deployment
spec:
  suspend: true                 # ensures this cron job never runs
  schedule: 0 0 1 1 1           # but a valid cron exprssion is still required
  jobTemplate:
      # describes the [job template](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)
    spec:
      parallelism: 1 # [max number of desired pods](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#controlling-parallelism)
      completions: 1 # [desired number of successfully finished pods](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#controlling-parallelism)
      activeDeadlineSeconds: 36000 # 10hours - grace in case our step function failed to kill it # Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
      backoffLimit: 0 # Specifies the number of retries before marking this job failed.
      template:
        metadata:
          labels:
            env0: agent-deployment
          annotations:
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        spec:
          volumes:
            {{ if not (hasKey .Values "env0StateEncryptionKey") }}
            - name: env0-state-volume
              persistentVolumeClaim:
                claimName: env0-state-volume-claim
            {{ end }}
            - name: tmp
              emptyDir: { }
            - name: home
              emptyDir: { }
            {{ if .Values.customCertificates }}
            - name: etc-ssl-certs
              emptyDir: { }
            - name: custom-certificates
              projected:
                sources:
                {{- range .Values.customCertificates }}
                - secret:
                    name: {{ . }}
                {{- end }}
            {{ end }}
          {{ if hasKey .Values "agentImagePullSecret" }}
          imagePullSecrets:
            - name: env0-image-pull-secret-{{ .Values.agentKey }}
          {{ end }}
          {{ if .Values.deploymentJobServiceAccountName }}
          serviceAccountName: {{ .Values.deploymentJobServiceAccountName }}
          {{ end }}
          {{ if .Values.strictSecurityContext }}
          initContainers:
            # when running with strict security context we mount emptyDir volume to /`home`
            # but we have some content in `/home` of the image.
            # so we use InitContainer to copy the content of `/home` to the volume
            # we mount it to `/home-mount` and copy the content of `/home` to `/home-mount`
            - name: init-container
  {{ include "env0-agent.strict-security-context" . | indent 14 }}
              image: {{ .Values.dockerImage }}
              command: [ "/bin/sh", "-c"]
              args:
                - echo 'Copy home dir content to the mount';
                  cp -rvp /home/* /home-mount;
                  echo 'Done';
              volumeMounts:
                - name: home
                  mountPath: /home-mount
          {{ end }}
          containers:
            - name: deployment-container
  {{ include "env0-agent.strict-security-context" . | indent 14 }}
              image: {{ .Values.dockerImage }}
              imagePullPolicy: {{ default "Always" .Values.agentImagePullPolicy }}
              command: ["/bin/sh", "-c"]
              args:
                # update-ca-certificates must be called before node starts
                - update-ca-certificates;
                  node --enable-source-maps main.js;
              volumeMounts:
              {{ if not (hasKey .Values "env0StateEncryptionKey") }}
                - name: env0-state-volume
                  mountPath: {{ $stateMountPath }}
              {{ end }}
              {{ if .Values.customCertificates }}
                - name: etc-ssl-certs
                  mountPath: /etc/ssl/certs
                - name: custom-certificates
                  mountPath: /usr/local/share/ca-certificates
                  readOnly: true
              {{ end }}
              {{ if .Values.strictSecurityContext }}
                - name: tmp
                  mountPath: /tmp
                - name: home
                  mountPath: /home
              {{ end }}
              resources:
                limits:
                  cpu: "{{ .Values.limits.cpu }}"
                  memory: "{{ .Values.limits.memory }}"
                {{ if .Values.requests }}
                requests:
                  cpu: "{{ .Values.requests.cpu }}"
                  memory: "{{ .Values.requests.memory }}"
                {{ end }}
              envFrom:
                - secretRef:
                    name: env0-secrets-{{ .Values.agentKey }}
              env:
{{ include "env0-agent.http-proxy" . | indent 16 }}
                - name: AGENT_VERSION
                  value: {{ quote (regexReplaceAll ".*:" .Values.dockerImage "") }}
                - name: IS_K8S
                  value: "true"
                - name: STAGE
                  value: "{{ .Values.agentKey }}"
                - name: ENV0_STAGE
                  value: "{{ .Values.stage }}"
                - name: IS_SELF_HOSTED_K8S
                  value: "{{ .Values.isSelfHosted }}"
                - name: DEPLOYMENT_LOGS_LOG_LEVEL
                  value: "debug"
                - name: ENV0_SERVICE_NAME
                  value: "deployment-service-{{ .Values.stage }}-deployment-task" # used as caller id to authorize task to invoke other services
                - name: KMS_KEY_ARN
                  value: "{{ .Values.kmsKeyArn }}"
                - name: HEARTBEAT_INTERVAL
                  value: "10000"
                - name: SIGTERM_TIMEOUT
                  value: "60000"
                - name: OUTPUT_LOGS_LOG_GROUP_NAME
                  value: "{{ .Values.outputLogsLogGroupName }}"
                - name: DEPLOYMENT_ECS_TASK_RUNTIME_TIMEOUT_SECONDS
                  value: "18000" # used as duration for assume role
                - name: STATE_MOUNT_PATH
                  value: "{{ $stateMountPath }}/{{ .Values.agentKey }}"
                - name: AGENT_API_GATEWAY_URL
                  value: "{{ .Values.apiGatewayUrl }}"
                - name: AWS_SECRETS_REGION
                  value: "{{ .Values.awsSecretsRegion }}"
                - name: CUSTOMER_VAULT_URL
                  value: "{{ .Values.customerVaultUrl }}"
                - name: GITLAB_ENTERPRISE_BASE_URL_SUFFIX
                  value: {{ .Values.gitlabEnterpriseBaseUrlSuffix | default "" | quote  }}
                - name: GITHUB_ENTERPRISE_APP_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: env0-secrets-{{ .Values.agentKey }}
                      key: GITHUB_ENTERPRISE_APP_CLIENT_SECRET
                - name: GITHUB_ENTERPRISE_APP_PRIVATE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: env0-secrets-{{ .Values.agentKey }}
                      key: GITHUB_ENTERPRISE_APP_PRIVATE_KEY
                - name: GITHUB_ENTERPRISE_APP_ID
                  value: {{ .Values.githubEnterpriseAppId | default "" | quote }}
                - name: GITHUB_ENTERPRISE_APP_CLIENT_ID
                  value: {{ .Values.githubEnterpriseAppClientId | default "" | quote }}
                - name: GITHUB_ENTERPRISE_APP_INSTALLATION_ID
                  value: {{ .Values.githubEnterpriseAppInstallationId | default "" | quote }}
                - name: ALLOWED_VCS_URL_REGEX
                  value: {{ empty .Values.allowedVcsUrlRegex | ternary .Values.allowedVcsUrlRegex (quote .Values.allowedVcsUrlRegex) }}
                ### K8S Metadata
                - name: K8S_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: DEPLOYMENT_JOB_SERVICE_ACCOUNT_NAME
                  value: {{ .Values.deploymentJobServiceAccountName | default "" }}
                {{ if .Values.gitSslNoVerify }}
                # even if this env var is empty it's consider 'true', so it's wrapped in an 'if'
                - name: GIT_SSL_NO_VERIFY
                  value: {{ .Values.gitSslNoVerify | quote }}
                {{ end }}
                {{ if .Values.strictSecurityContext }}
                - name: STRICT_SECURITY_CONTEXT
                  value: {{ .Values.strictSecurityContext | quote }}
                {{ end }}
                {{ if .Values.customCertificates }}
                - name: NODE_EXTRA_CA_CERTS
                  value: /etc/ssl/certs/ca-certificates.crt
                {{ end }}
                {{ if .Values.env0StateEncryptionKey }}
                - name: ENV0_STATE_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: env0-secrets-{{ .Values.agentKey }}
                      key: ENV0_STATE_ENCRYPTION_KEY
                {{ end }}
                {{ if .Values.logger }}
                - name: CONSOLE_LOGS_FORMAT
                  value: {{ .Values.logger.format }}
                - name: CONSOLE_LOGS_LEVEL
                  value: {{ .Values.logger.level }}
                {{ end }}


          terminationGracePeriodSeconds: 18000

          restartPolicy: Never
          {{ if .Values.tolerations }}
          # Warning - every whitespace here matters
          tolerations: {{ range $i, $toleration := .Values.tolerations }}
            -
            {{ range $k, $v := $toleration }}  {{ $k }}: {{ $v }}
            {{ end }}{{ end }}
          {{ end }}
          {{ if .Values.deploymentAffinity }}
          affinity: {{ .Values.deploymentAffinity | toYaml | trim | nindent 12 }}
          {{ else if .Values.affinity }}
          affinity: {{ .Values.affinity | toYaml | trim | nindent 12 }}
          {{ end }}
